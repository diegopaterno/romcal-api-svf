import { i18n } from 'i18next';

declare class Dates {
	#private;
	constructor(config: RomcalConfig, year: number);
	allDatesOfAdvent: (year?: number) => Date[];
	allSundaysOfAdvent: (year?: number) => Date[];
	firstSundayOfAdvent: (year?: number) => Date;
	static firstSundayOfAdvent: (year: number) => Date;
	unprivilegedWeekdayOfAdvent: (dow: number, week: number, year?: number) => Date | null;
	privilegedWeekdayOfAdvent: (day: number, year?: number) => Date | null;
	sundayOfAdvent: (week: number, year?: number) => Date | null;
	christmas: (year?: number) => Date;
	static christmas: (year: number) => Date;
	allDatesInOctaveOfChristmas: (year?: number) => Date[];
	weekdayWithinOctaveOfChristmas: (dayOfOctave: number, year?: number) => Date | null;
	allDatesOfChristmasTime: (year?: number, epiphanyOnSunday?: boolean) => Date[];
	secondSundayAfterChristmas: (year?: number, epiphanyOnSunday?: boolean) => Date | null;
	allDatesBeforeEpiphany: (year?: number, epiphanyOnSunday?: boolean) => Date[];
	weekdayBeforeEpiphany: (day: number, year?: number, epiphanyOnSunday?: boolean) => Date | null;
	epiphany: (year?: number, epiphanyOnSunday?: boolean) => Date;
	allDatesAfterEpiphany: (year?: number, epiphanyOnSunday?: boolean) => Date[];
	weekdayAfterEpiphany: (dow: number, year?: number, epiphanyOnSunday?: boolean) => Date | null;
	ashWednesday: (year?: number) => Date;
	allSundaysOfLent: (year?: number) => Date[];
	allDatesOfLent: (year?: number) => Date[];
	palmSunday: (year?: number) => Date;
	holyThursday: (year?: number) => Date;
	goodFriday: (year?: number) => Date;
	holySaturday: (year?: number) => Date;
	allDatesOfHolyWeek: (year?: number) => Date[];
	allDatesOfPaschalTriduum: (year?: number) => Date[];
	easterSunday: (year?: number, easterCalculationType?: EasterCalculationType) => Date;
	allDatesInOctaveOfEaster: (year?: number) => Date[];
	allSundaysOfEaster: (year?: number) => Date[];
	weekdayOrSundayOfEasterTime: (dow: number, week: number, year?: number, ascensionOnSunday?: boolean) => Date | null;
	allDatesOfEasterTime: (year?: number) => Date[];
	divineMercySunday: (year?: number) => Date;
	pentecostSunday: (year?: number) => Date;
	allDatesOfOrdinaryTime: (year?: number, epiphanyOnSunday?: boolean) => Date[];
	allDatesOfEarlyOrdinaryTime: (year?: number, epiphanyOnSunday?: boolean) => Date[];
	sundaysOfEarlyOrdinaryTime: (year?: number) => Date[];
	allDatesOfLateOrdinaryTime: (year?: number) => Date[];
	allSundaysOfLateOrdinaryTime: (year?: number) => Date[];
	christTheKingSunday: (year?: number) => Date;
	dateOfOrdinaryTime: (dow: number, week: number, year?: number, epiphanyOnSunday?: boolean) => Date | null;
	maryMotherOfGod: (year?: number) => Date;
	annunciation: (year?: number) => Date;
	nativityOfJohnTheBaptist: (year?: number) => Date;
	peterAndPaulApostles: (year?: number) => Date;
	assumption: (year?: number) => Date;
	allSaints: (year?: number) => Date;
	immaculateConceptionOfMary: (year?: number) => Date;
	ascension: (year?: number, ascensionOnSunday?: boolean) => Date;
	maryMotherOfTheChurch: (year?: number) => Date;
	trinitySunday: (year?: number) => Date;
	corpusChristi: (year?: number, corpusChristiOnSunday?: boolean) => Date;
	mostSacredHeartOfJesus: (year?: number) => Date;
	immaculateHeartOfMary: (year?: number) => Date;
	holyFamily: (year?: number) => Date;
	baptismOfTheLord: (year?: number, epiphanyOnSunday?: boolean) => Date;
	presentationOfTheLord: (year?: number) => Date;
	transfiguration: (year?: number) => Date;
	exaltationOfTheHolyCross: (year?: number) => Date;
	startOfSeasons: (year?: number) => Record<Season, Date>;
	endOfSeasons: (year?: number) => Record<Season, Date>;
}
declare const CANONIZATION_LEVEL: ScreamingSnakeCase<keyof typeof CanonizationLevels>[];
declare const COLORS: Uppercase<keyof typeof Colors>[];
declare const MONTHS: readonly [
	"january",
	"february",
	"march",
	"april",
	"may",
	"june",
	"july",
	"august",
	"september",
	"october",
	"november",
	"december"
];
declare const PRECEDENCES: ("TRIDUUM_1" | "PROPER_OF_TIME_SOLEMNITY_2" | "PRIVILEGED_SUNDAY_2" | "ASH_WEDNESDAY_2" | "WEEKDAY_OF_HOLY_WEEK_2" | "WEEKDAY_OF_EASTER_OCTAVE_2" | "GENERAL_SOLEMNITY_3" | "COMMEMORATION_OF_ALL_THE_FAITHFUL_DEPARTED_3" | "PROPER_SOLEMNITY__PRINCIPAL_PATRON_4A" | "PROPER_SOLEMNITY__DEDICATION_OF_THE_OWN_CHURCH_4B" | "PROPER_SOLEMNITY__TITLE_OF_THE_OWN_CHURCH_4C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_4D" | "GENERAL_LORD_FEAST_5" | "UNPRIVILEGED_SUNDAY_6" | "GENERAL_FEAST_7" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_DIOCESE_8A" | "PROPER_FEAST__DEDICATION_OF_THE_CATHEDRAL_CHURCH_8B" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_REGION_8C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_8D" | "PROPER_FEAST__TO_AN_INDIVIDUAL_CHURCH_8E" | "PROPER_FEAST_8F" | "PRIVILEGED_WEEKDAY_9" | "GENERAL_MEMORIAL_10" | "PROPER_MEMORIAL__SECOND_PATRON_11A" | "PROPER_MEMORIAL_11B" | "WEEKDAY_13" | "OPTIONAL_MEMORIAL_12")[];
declare const PROPER_CYCLES: ("PROPER_OF_TIME" | "PROPER_OF_SAINTS")[];
declare const PSALTER_WEEKS: ("WEEK_1" | "WEEK_2" | "WEEK_3" | "WEEK_4")[];
declare const RANKS: readonly [
	Ranks.Solemnity,
	Ranks.Sunday,
	Ranks.Feast,
	Ranks.Memorial,
	Ranks.OptionalMemorial,
	Ranks.Weekday
];
declare const SEXES: ScreamingSnakeCase<keyof typeof Sexes>[];
declare const SUNDAY_CYCLES: ("YEAR_A" | "YEAR_B" | "YEAR_C")[];
declare const WEEKDAYS: readonly [
	"sunday",
	"monday",
	"tuesday",
	"wednesday",
	"thursday",
	"friday",
	"saturday"
];
declare const WEEKDAY_CYCLES: ("YEAR_1" | "YEAR_2")[];
declare enum CanonizationLevels {
	Blessed = "BLESSED",
	Saint = "SAINT"
}
declare enum Colors {
	Red = "RED",
	Rose = "ROSE",
	Purple = "PURPLE",
	Green = "GREEN",
	White = "WHITE",
	Gold = "GOLD",
	Black = "BLACK"
}
declare enum CommonDefinition {
	None = "None",
	DedicationAnniversary_Inside = "DedicationAnniversary_Inside",
	DedicationAnniversary_Outside = "DedicationAnniversary_Outside",
	BlessedVirginMary = "BlessedVirginMary",
	Martyrs = "Martyrs",
	MissionaryMartyrs = "MissionaryMartyrs",
	VirginMartyrs = "VirginMartyrs",
	WomanMartyrs = "WomanMartyrs",
	Pastors = "Pastors",
	Popes = "PopeOrBishop",
	Bishops = "Bishops",
	Founders = "Founders",
	Missionaries = "Missionaries",
	DoctorsOfTheChurch = "DoctorsOfTheChurch",
	Virgins = "Virgins",
	Saints = "Saints",
	Abbots = "Abbots",
	Monks = "Monks",
	Nuns = "Nuns",
	Religious = "Religious",
	MercyWorkers = "MercyWorkers",
	Educators = "Educators",
	HolyWomen = "HolyWomen"
}
declare enum Ranks {
	Solemnity = "SOLEMNITY",
	Sunday = "SUNDAY",
	Feast = "FEAST",
	Memorial = "MEMORIAL",
	OptionalMemorial = "OPTIONAL_MEMORIAL",
	Weekday = "WEEKDAY"
}
declare enum Sexes {
	Male = "MALE",
	Female = "FEMALE"
}
export declare class Calendar implements BaseCalendar {
	#private;
	readonly dates: Dates;
	constructor(config: RomcalConfig, liturgicalDayConfig: LiturgicalDayConfig);
	getOneLiturgicalDay(id: Id): LiturgicalDay | null | undefined;
	generateCalendar(): LiturgicalCalendar;
}
export declare class CalendarDef implements BaseCalendarDef {
	#private;
	readonly dates: typeof Dates;
	ParentCalendars?: CalendarDefInstance[] | null;
	parentCalendarInstances?: InstanceType<CalendarDefInstance>[];
	readonly particularConfig?: ParticularConfig;
	inputs: CalendarDefInputs;
	get calendarName(): Id;
	constructor(config: RomcalConfig, inputs?: BundleInputs);
	updateConfig(input?: RomcalConfigInput): void;
	buildAllDefinitions(): void;
}
export declare class CyclesMetadata implements BaseCyclesMetadata {
	#private;
	properCycle: ProperCycle;
	sundayCycle: SundayCycle;
	weekdayCycle: WeekdayCycle;
	psalterWeek: PsalterWeekCycle;
	constructor(date: Date, calendar: RomcalCalendarMetadata, properCycle: ProperCycle, config: RomcalConfig);
	get properCycleName(): string;
	get sundayCycleName(): string;
	get weekdayCycleName(): string;
	get psalterWeekName(): string;
	toObject(): PlainCyclesMetadata;
}
export declare class LiturgicalDay implements BaseLiturgicalDay {
	#private;
	readonly id: Id;
	readonly date: string;
	readonly dateDef: DateDef;
	readonly dateExceptions: DateDefException[];
	readonly alternativeTransferDateDefs: FullDateDefinition[];
	readonly precedence: Precedence;
	readonly rank: Rank;
	readonly allowSimilarRankItems: boolean;
	readonly isHolyDayOfObligation: boolean;
	isOptional: boolean;
	readonly i18nDef: i18nDef;
	readonly seasons: Season[];
	readonly periods: Period[];
	readonly colors: Color[];
	readonly commonsDef: CommonDefinition[];
	readonly martyrology: MartyrologyItem[];
	readonly titles: RomcalTitles;
	readonly calendar: RomcalCalendarMetadata;
	readonly cycles: CyclesMetadata;
	readonly fromCalendarId: FromCalendarId;
	readonly fromExtendedCalendars: LiturgyDayDiff[];
	weekday?: LiturgicalDay;
	get name(): string;
	get rankName(): string;
	get colorNames(): string[];
	get seasonNames(): string[];
	get config(): LiturgicalDayConfigOutput;
	get definition(): LiturgicalDayDef;
	constructor(def: LiturgicalDayDef, date: Date, liturgicalDayConfig: LiturgicalDayConfig, calendar: RomcalCalendarMetadata, baseData: LiturgicalDay | null, weekday: LiturgicalDay | null);
	toJson(): LiturgicalDay;
}
export declare class LiturgicalDayConfig implements BaseLiturgicalDayConfig {
	#private;
	readonly config: RomcalConfig;
	readonly year: number;
	readonly dates: Dates;
	constructor(config: RomcalConfig, year?: number);
	buildDate(def: LiturgicalDayDef, yearOffset?: number): Date | null;
	getConfigObject(): LiturgicalDayConfigOutput;
}
export declare class LiturgicalDayDef implements BaseLiturgicalDayDef {
	#private;
	readonly id: Id;
	readonly dateDef: DateDef;
	readonly dateExceptions: DateDefException[];
	readonly alternativeTransferDateDefs: FullDateDefinition[];
	readonly precedence: Precedence;
	readonly rank: Rank;
	readonly commonsDef: CommonDefinition[];
	readonly isHolyDayOfObligation: boolean;
	readonly allowSimilarRankItems: boolean;
	readonly isOptional: boolean;
	readonly i18nDef: i18nDef;
	readonly seasons: Season[];
	readonly periods: Period[];
	readonly calendarMetadata: CalendarMetadata;
	readonly colors: Color[];
	readonly martyrology: MartyrologyItem[];
	readonly titles: RomcalTitles;
	readonly cycles: PartialCyclesDef;
	readonly fromCalendarId: FromCalendarId;
	readonly fromExtendedCalendars: LiturgyDayDiff[];
	readonly input: LiturgicalDayBundleInput[];
	get name(): string;
	get rankName(): string;
	get seasonNames(): string[];
	get colorNames(): string[];
	constructor(id: Id, input: LiturgicalDayProperOfTimeInput | LiturgicalDayInput | LiturgicalDayBundleInput, fromCalendarId: FromCalendarId, config: RomcalConfig);
	static precedenceToRank(precedence: Precedence, id: string): Rank;
}
export declare class Romcal {
	#private;
	constructor(config?: RomcalConfigInput);
	get config(): RomcalConfigOutput;
	dates(year?: number | string): Dates;
	getOneLiturgicalDay(id: Id, options?: {
		year?: number | string;
		computeInWholeYear?: boolean;
	}): Promise<LiturgicalDay | null | undefined>;
	generateCalendar(year?: number | string): Promise<LiturgicalCalendar>;
	getAllDefinitions(): Promise<LiturgicalDayDefinitions>;
	getVersion(): string;
	static getVersion(): string;
	static Colors: typeof Colors;
	static COLORS: Color[];
	static isColor: (maybeColor: unknown) => boolean;
	static ProperCycles: {
		readonly ProperOfTime: "PROPER_OF_TIME";
		readonly ProperOfSaints: "PROPER_OF_SAINTS";
	};
	static PROPER_CYCLE: ("PROPER_OF_TIME" | "PROPER_OF_SAINTS")[];
	static SundayCycles: {
		readonly YearA: "YEAR_A";
		readonly YearB: "YEAR_B";
		readonly YearC: "YEAR_C";
	};
	static SUNDAYS_CYCLE: ("YEAR_A" | "YEAR_B" | "YEAR_C")[];
	static WeekdayCycles: {
		readonly Year1: "YEAR_1";
		readonly Year2: "YEAR_2";
	};
	static WEEKDAYS_CYCLE: ("YEAR_1" | "YEAR_2")[];
	static PsalterWeekCycles: {
		readonly Week1: "WEEK_1";
		readonly Week2: "WEEK_2";
		readonly Week3: "WEEK_3";
		readonly Week4: "WEEK_4";
	};
	static PSALTER_WEEKS: ("WEEK_1" | "WEEK_2" | "WEEK_3" | "WEEK_4")[];
	static PROPER_OF_TIME_NAME: string;
	static GENERAL_ROMAN_NAME: string;
	static CanonizationLevels: typeof CanonizationLevels;
	static CANONIZATION_LEVEL: ScreamingSnakeCase<"Blessed" | "Saint">[];
	static Sexes: typeof Sexes;
	static SEXES: ScreamingSnakeCase<"Male" | "Female">[];
	static Titles: typeof Title;
	static TITLES: ScreamingSnakeCase<"Religious" | "Abbess" | "Abbot" | "Apostle" | "Archangel" | "Bishop" | "Deacon" | "DoctorOfTheChurch" | "Empress" | "Evangelist" | "FirstBishop" | "Hermit" | "King" | "Martyr" | "Missionary" | "Monk" | "MotherAndQueenOfChile" | "ParentsOfTheBlessedVirginMary" | "Pope" | "Patriarch" | "Pilgrim" | "Priest" | "Prophet" | "ProtoMartyrOfOceania" | "Queen" | "QueenOfPoland" | "SlavicMissionary" | "SpouseOfTheBlessedVirginMary" | "TheFirstMartyr" | "Virgin">[];
	static isMartyr: (titles: RomcalTitles) => boolean;
	static PatronTitles: typeof PatronTitle;
	static PATRON_TITLES: ScreamingSnakeCase<"CopatronOfEurope" | "CopatronOfIreland" | "CopatronOfCanada" | "CopatronessOfEurope" | "CopatronessOfFrance" | "CopatronessOfIreland" | "CopatronessOfItalyAndEurope" | "CopatronessOfThePhilippines" | "PatronOfCanada" | "PatronOfEngland" | "PatronOfEurope" | "PatronOfFrance" | "PatronOfIreland" | "PatronOfItaly" | "PatronOfOceania" | "PatronOfPoland" | "PatronOfRussia" | "PatronOfScotland" | "PatronOfSpain" | "PatronOfTheCzechNation" | "PatronOfTheDiocese" | "PatronOfWales" | "PatronessOfAlsace" | "PatronessOfArgentina" | "PatronessOfBrazil" | "PatronessOfHungary" | "PatronessOfPuertoRico" | "PatronessOfSlovakia" | "PatronessOfTheAmericas" | "PatronessOfThePhilippines" | "PatronessOfTheProvinceOfQuebec" | "PatronessOfTheUSA" | "PatronOfTheClergyOfTheArchdioceseOfLyon" | "PatronOfTheCityOfLyon" | "PatronessOfCostaRica" | "PrincipalPatronOfTheDiocese" | "SecondPatronOfTheDiocese">[];
	static MONTHS: readonly [
		"january",
		"february",
		"march",
		"april",
		"may",
		"june",
		"july",
		"august",
		"september",
		"october",
		"november",
		"december"
	];
	static Periods: typeof Period;
	static PERIODS: ScreamingSnakeCase<"ChristmasOctave" | "DaysBeforeEpiphany" | "DaysFromEpiphany" | "ChristmasToPresentationOfTheLord" | "PresentationOfTheLordToHolyThursday" | "HolyWeek" | "EasterOctave" | "EarlyOrdinaryTime" | "LateOrdinaryTime">[];
	static Precedences: {
		readonly Triduum_1: "TRIDUUM_1";
		readonly ProperOfTimeSolemnity_2: "PROPER_OF_TIME_SOLEMNITY_2";
		readonly PrivilegedSunday_2: "PRIVILEGED_SUNDAY_2";
		readonly AshWednesday_2: "ASH_WEDNESDAY_2";
		readonly WeekdayOfHolyWeek_2: "WEEKDAY_OF_HOLY_WEEK_2";
		readonly WeekdayOfEasterOctave_2: "WEEKDAY_OF_EASTER_OCTAVE_2";
		readonly GeneralSolemnity_3: "GENERAL_SOLEMNITY_3";
		readonly CommemorationOfAllTheFaithfulDeparted_3: "COMMEMORATION_OF_ALL_THE_FAITHFUL_DEPARTED_3";
		readonly ProperSolemnity_PrincipalPatron_4a: "PROPER_SOLEMNITY__PRINCIPAL_PATRON_4A";
		readonly ProperSolemnity_DedicationOfTheOwnChurch_4b: "PROPER_SOLEMNITY__DEDICATION_OF_THE_OWN_CHURCH_4B";
		readonly ProperSolemnity_TitleOfTheOwnChurch_4c: "PROPER_SOLEMNITY__TITLE_OF_THE_OWN_CHURCH_4C";
		readonly ProperSolemnity_TitleOrFounderOrPrimaryPatronOfAReligiousOrg_4d: "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_4D";
		readonly GeneralLordFeast_5: "GENERAL_LORD_FEAST_5";
		readonly UnprivilegedSunday_6: "UNPRIVILEGED_SUNDAY_6";
		readonly GeneralFeast_7: "GENERAL_FEAST_7";
		readonly ProperFeast_PrincipalPatronOfADiocese_8a: "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_DIOCESE_8A";
		readonly ProperFeast_DedicationOfTheCathedralChurch_8b: "PROPER_FEAST__DEDICATION_OF_THE_CATHEDRAL_CHURCH_8B";
		readonly ProperFeast_PrincipalPatronOfARegion_8c: "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_REGION_8C";
		readonly ProperFeast_TitleOrFounderOrPrimaryPatronOfAReligiousOrg_8d: "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_8D";
		readonly ProperFeast_ToAnIndividualChurch_8e: "PROPER_FEAST__TO_AN_INDIVIDUAL_CHURCH_8E";
		readonly ProperFeast_8f: "PROPER_FEAST_8F";
		readonly PrivilegedWeekday_9: "PRIVILEGED_WEEKDAY_9";
		readonly GeneralMemorial_10: "GENERAL_MEMORIAL_10";
		readonly ProperMemorial_SecondPatron_11a: "PROPER_MEMORIAL__SECOND_PATRON_11A";
		readonly ProperMemorial_11b: "PROPER_MEMORIAL_11B";
		readonly Weekday_13: "WEEKDAY_13";
		readonly OptionalMemorial_12: "OPTIONAL_MEMORIAL_12";
	};
	static PRECEDENCES: ("TRIDUUM_1" | "PROPER_OF_TIME_SOLEMNITY_2" | "PRIVILEGED_SUNDAY_2" | "ASH_WEDNESDAY_2" | "WEEKDAY_OF_HOLY_WEEK_2" | "WEEKDAY_OF_EASTER_OCTAVE_2" | "GENERAL_SOLEMNITY_3" | "COMMEMORATION_OF_ALL_THE_FAITHFUL_DEPARTED_3" | "PROPER_SOLEMNITY__PRINCIPAL_PATRON_4A" | "PROPER_SOLEMNITY__DEDICATION_OF_THE_OWN_CHURCH_4B" | "PROPER_SOLEMNITY__TITLE_OF_THE_OWN_CHURCH_4C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_4D" | "GENERAL_LORD_FEAST_5" | "UNPRIVILEGED_SUNDAY_6" | "GENERAL_FEAST_7" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_DIOCESE_8A" | "PROPER_FEAST__DEDICATION_OF_THE_CATHEDRAL_CHURCH_8B" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_REGION_8C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_8D" | "PROPER_FEAST__TO_AN_INDIVIDUAL_CHURCH_8E" | "PROPER_FEAST_8F" | "PRIVILEGED_WEEKDAY_9" | "GENERAL_MEMORIAL_10" | "PROPER_MEMORIAL__SECOND_PATRON_11A" | "PROPER_MEMORIAL_11B" | "WEEKDAY_13" | "OPTIONAL_MEMORIAL_12")[];
	static Ranks: typeof Ranks;
	static RANKS: readonly [
		Ranks.Solemnity,
		Ranks.Sunday,
		Ranks.Feast,
		Ranks.Memorial,
		Ranks.OptionalMemorial,
		Ranks.Weekday
	];
	static RanksFromPrecedence: Record<"TRIDUUM_1" | "PROPER_OF_TIME_SOLEMNITY_2" | "PRIVILEGED_SUNDAY_2" | "ASH_WEDNESDAY_2" | "WEEKDAY_OF_HOLY_WEEK_2" | "WEEKDAY_OF_EASTER_OCTAVE_2" | "GENERAL_SOLEMNITY_3" | "COMMEMORATION_OF_ALL_THE_FAITHFUL_DEPARTED_3" | "PROPER_SOLEMNITY__PRINCIPAL_PATRON_4A" | "PROPER_SOLEMNITY__DEDICATION_OF_THE_OWN_CHURCH_4B" | "PROPER_SOLEMNITY__TITLE_OF_THE_OWN_CHURCH_4C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_4D" | "GENERAL_LORD_FEAST_5" | "UNPRIVILEGED_SUNDAY_6" | "GENERAL_FEAST_7" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_DIOCESE_8A" | "PROPER_FEAST__DEDICATION_OF_THE_CATHEDRAL_CHURCH_8B" | "PROPER_FEAST__PRINCIPAL_PATRON_OF_A_REGION_8C" | "PROPER_SOLEMNITY__TITLE_OR_FOUNDER_OR_PRIMARY_PATRON_OF_A_RELIGIOUS_ORG_8D" | "PROPER_FEAST__TO_AN_INDIVIDUAL_CHURCH_8E" | "PROPER_FEAST_8F" | "PRIVILEGED_WEEKDAY_9" | "GENERAL_MEMORIAL_10" | "PROPER_MEMORIAL__SECOND_PATRON_11A" | "PROPER_MEMORIAL_11B" | "WEEKDAY_13" | "OPTIONAL_MEMORIAL_12", Ranks>;
	static Seasons: typeof Season;
	static SEASONS: ScreamingSnakeCase<"Advent" | "ChristmasTime" | "Lent" | "PaschalTriduum" | "EasterTime" | "OrdinaryTime">[];
	static WEEKDAYS: readonly [
		"sunday",
		"monday",
		"tuesday",
		"wednesday",
		"thursday",
		"friday",
		"saturday"
	];
	static RomcalBundle: typeof RomcalBundle;
	static Calendar: typeof Calendar;
	static CalendarDef: typeof CalendarDef;
	static RomcalConfig: typeof RomcalConfig;
	static CyclesMetadata: typeof CyclesMetadata;
	static LiturgicalDay: typeof LiturgicalDay;
	static LiturgicalDayConfig: typeof LiturgicalDayConfig;
	static LiturgicalDayDef: typeof LiturgicalDayDef;
	static getUtcDate: (year: number, month: number, date: number) => Date;
	static getUtcDateFromString: (dateStr: string) => Date;
	static addDays: (date: Date, days: number) => Date;
	static subtractsDays: (date: Date, days: number) => Date;
	static isSameDate: (date1: Date, date2: Date) => boolean;
	static dateDifference: (date1: Date, date2: Date) => number;
	static startOfWeek: (date: Date) => Date;
	static isValidDate: (maybeDate: unknown) => maybeDate is Date;
	static daysInMonth: (date: Date) => number;
	static getWeekNumber: (date: Date) => number;
	static computeGregorianEasterDate: (year: number) => EasterDate;
	static computeJulianEasterDate: (year: number) => EasterDate;
	static rangeContainsDate: (range: Date[], date: Date) => boolean;
	static rangeOfDays: (start: Date, end: Date) => Date[];
	static toRomanNumber: (number: number) => string;
	static CALENDAR_VAR_NAMES: string[];
	static CALENDAR_PKG_NAMES: string[];
	static LOCALE_VAR_NAMES: string[];
	static LOCALE_IDS: string[];
}
export declare class RomcalBundle implements BaseRomcalBundle {
	calendarName: Id;
	particularConfig: ParticularConfig;
	inputs: BundleInputs;
	martyrology: MartyrologyCatalog;
	i18n: Locale;
	constructor(input: BaseRomcalBundle);
}
export declare class RomcalConfig implements IRomcalConfig {
	#private;
	readonly localizedCalendar?: RomcalBundleObject;
	readonly localeId: string;
	readonly calendarName: string;
	epiphanyOnSunday: boolean;
	corpusChristiOnSunday: boolean;
	ascensionOnSunday: boolean;
	elevatedMemorialIds: string[];
	easterCalculationType: EasterCalculationType;
	readonly scope: CalendarScope;
	readonly i18next: i18n;
	readonly dates: typeof Dates;
	readonly martyrologyCatalog: MartyrologyCatalog;
	readonly cyclesCache: Record<number, Pick<BaseCyclesMetadata, "sundayCycle" | "weekdayCycle">>;
	readonly calendarsDef: InstanceType<CalendarDefInstance>[];
	liturgicalDayDef: LiturgicalDayDefinitions;
	readonly outputOptions: OutputOptions;
	clone(): RomcalConfig;
	constructor(config?: RomcalConfigInput, martyrologyCatalog?: MartyrologyCatalog, locale?: Locale, ParticularCalendar?: typeof CalendarDef);
	getLiturgicalColorNames(colors: Color[]): string[];
	getSeasonNames(seasons: Season[]): string[];
	toObject(): RomcalConfigOutput;
}
export declare enum PatronTitle {
	CopatronOfEurope = "COPATRON_OF_EUROPE",
	CopatronOfIreland = "COPATRON_OF_IRELAND",
	CopatronOfCanada = "COPATRON_OF_CANADA",
	CopatronessOfEurope = "COPATRONESS_OF_EUROPE",
	CopatronessOfFrance = "COPATRONESS_OF_FRANCE",
	CopatronessOfIreland = "COPATRONESS_OF_IRELAND",
	CopatronessOfItalyAndEurope = "COPATRONESS_OF_ITALY_AND_EUROPE",
	CopatronessOfThePhilippines = "COPATRONESS_OF_THE_PHILIPPINES",
	PatronOfCanada = "PATRON_OF_CANADA",
	PatronOfEngland = "PATRON_OF_ENGLAND",
	PatronOfEurope = "PATRON_OF_EUROPE",
	PatronOfFrance = "PATRON_OF_FRANCE",
	PatronOfIreland = "PATRON_OF_IRELAND",
	PatronOfItaly = "PATRON_OF_ITALY",
	PatronOfOceania = "PATRON_OF_OCEANIA",
	PatronOfPoland = "PATRON_OF_POLAND",
	PatronOfRussia = "PATRON_OF_RUSSIA",
	PatronOfScotland = "PATRON_OF_SCOTLAND",
	PatronOfSpain = "PATRON_OF_SPAIN",
	PatronOfTheCzechNation = "PATRON_OF_THE_CZECH_NATION",
	PatronOfTheDiocese = "PATRON_OF_THE_DIOCESE",
	PatronOfWales = "PATRON_OF_WALES",
	PatronessOfAlsace = "PATRONESS_OF_ALSACE",
	PatronessOfArgentina = "PATRONESS_OF_ARGENTINA",
	PatronessOfBrazil = "PATRONESS_OF_BRAZIL",
	PatronessOfHungary = "PATRONESS_OF_HUNGARY",
	PatronessOfPuertoRico = "PATRONESS_OF_PUERTO_RICO",
	PatronessOfSlovakia = "PATRONESS_OF_SLOVAKIA",
	PatronessOfTheAmericas = "PATRONESS_OF_THE_AMERICAS",
	PatronessOfThePhilippines = "PATRONESS_OF_THE_PHILIPPINES",
	PatronessOfTheProvinceOfQuebec = "PATRONESS_OF_THE_PROVINCE_OF_QUEBEC",
	PatronessOfTheUSA = "PATRONESS_OF_THE_U_S_A",
	PatronOfTheClergyOfTheArchdioceseOfLyon = "PATRON_OF_THE_CLERGY_OF_THE_ARCHDIOCESE_OF_LYON",
	PatronOfTheCityOfLyon = "PATRON_OF_THE_CITY_OF_LYON",
	PatronessOfCostaRica = "PATRONESS_OF_COSTA_RICA",
	PrincipalPatronOfTheDiocese = "PRINCIPAL_PATRON_OF_THE_DIOCESE",
	SecondPatronOfTheDiocese = "SECOND_PATRON_OF_THE_DIOCESE"
}
export declare enum Period {
	ChristmasOctave = "CHRISTMAS_OCTAVE",
	DaysBeforeEpiphany = "DAYS_BEFORE_EPIPHANY",
	DaysFromEpiphany = "DAYS_FROM_EPIPHANY",
	ChristmasToPresentationOfTheLord = "CHRISTMAS_TO_PRESENTATION_OF_THE_LORD",
	PresentationOfTheLordToHolyThursday = "PRESENTATION_OF_THE_LORD_TO_HOLY_THURSDAY",
	HolyWeek = "HOLY_WEEK",
	EasterOctave = "EASTER_OCTAVE",
	EarlyOrdinaryTime = "EARLY_ORDINARY_TIME",
	LateOrdinaryTime = "LATE_ORDINARY_TIME"
}
export declare enum Season {
	Advent = "ADVENT",
	ChristmasTime = "CHRISTMAS_TIME",
	Lent = "LENT",
	PaschalTriduum = "PASCHAL_TRIDUUM",
	EasterTime = "EASTER_TIME",
	OrdinaryTime = "ORDINARY_TIME"
}
export declare enum Title {
	Abbess = "ABBESS",
	Abbot = "ABBOT",
	Apostle = "APOSTLE",
	Archangel = "ARCHANGEL",
	Bishop = "BISHOP",
	Deacon = "DEACON",
	DoctorOfTheChurch = "DOCTOR_OF_THE_CHURCH",
	Empress = "EMPRESS",
	Evangelist = "EVANGELIST",
	FirstBishop = "FIRST_BISHOP",
	Hermit = "HERMIT",
	King = "KING",
	Martyr = "MARTYR",
	Missionary = "MISSIONARY",
	Monk = "MONK",
	MotherAndQueenOfChile = "MOTHER_AND_QUEEN_OF_CHILE",
	ParentsOfTheBlessedVirginMary = "PARENTS_OF_THE_BLESSED_VIRGIN_MARY",
	Pope = "POPE",
	Patriarch = "PATRIARCH",
	Pilgrim = "PILGRIM",
	Priest = "PRIEST",
	Prophet = "PROPHET",
	ProtoMartyrOfOceania = "PROTO_MARTYR_OF_OCEANIA",
	Queen = "QUEEN",
	QueenOfPoland = "QUEEN_OF_POLAND",
	Religious = "RELIGIOUS",
	SlavicMissionary = "SLAVIC_MISSIONARY",
	SpouseOfTheBlessedVirginMary = "SPOUSE_OF_THE_BLESSED_VIRGIN_MARY",
	TheFirstMartyr = "THE_FIRST_MARTYR",
	Virgin = "VIRGIN"
}
export interface BaseCalendar {
	dates: Dates;
	generateCalendar: (builtData: LiturgicalBuiltData) => LiturgicalCalendar;
}
export interface BaseCalendarDef {
	ParentCalendars?: CalendarDefInstance[] | null;
	parentCalendarInstances?: InstanceType<CalendarDefInstance>[];
	particularConfig?: ParticularConfig;
	inputs: CalendarDefInputs;
	dates: typeof Dates;
	updateConfig: (config?: RomcalConfigInput) => void;
	buildAllDefinitions: () => void;
	calendarName: Id;
}
export interface BaseLiturgicalDayConfig {
	readonly year: number;
}
export interface BaseRomcalBundle {
	calendarName: Id;
	particularConfig: ParticularConfig;
	inputs: BundleInputs;
	martyrology: MartyrologyCatalog;
	i18n: Locale;
}
export interface BaseRomcalConfig {
	readonly localizedCalendar?: RomcalBundleObject;
	readonly epiphanyOnSunday?: boolean;
	readonly corpusChristiOnSunday?: boolean;
	readonly ascensionOnSunday?: boolean;
	readonly elevatedMemorialIds?: string[];
	readonly easterCalculationType: EasterCalculationType;
	readonly scope?: CalendarScope;
	readonly calendarsDef: InstanceType<CalendarDefInstance>[];
	readonly localeId: Id;
	readonly calendarName: string;
	readonly outputOptions: OutputOptions;
}
export interface IConstructor<InstanceInterface> {
	new (config: RomcalConfig, definitions?: BundleInputs): InstanceInterface;
}
export interface IRomcalConfig extends BaseRomcalConfig {
	readonly i18next: i18n;
}
export interface Locale {
	id: Id;
	ordinals?: LocaleOrdinals;
	weekdays?: LocaleWeeks;
	months?: LocaleMonths;
	colors?: LocaleColors;
	seasons?: {
		advent?: {
			season?: string;
			weekday?: string;
			sunday?: string;
			privileged_weekday?: string;
		};
		christmas_time?: {
			season?: string;
			day?: string;
			octave?: string;
			before_epiphany?: string;
			second_sunday_after_christmas?: string;
			after_epiphany?: string;
		};
		ordinary_time?: {
			season?: string;
			weekday?: string;
			sunday?: string;
		};
		lent?: {
			season?: string;
			weekday?: string;
			sunday?: string;
			day_after_ash_wed?: string;
			holy_week_day?: string;
		};
		paschal_triduum?: {
			season?: string;
		};
		easter_time?: {
			season?: string;
			weekday?: string;
			sunday?: string;
			octave?: string;
		};
	};
	periods?: {
		epiphany?: string;
		holy_week?: string;
	};
	ranks?: {
		solemnity?: string;
		sunday?: string;
		feast?: string;
		memorial?: string;
		optional_memorial?: string;
		weekday?: string;
	};
	cycles?: {
		proper_of_time?: string;
		proper_of_saints?: string;
		sunday_year_a?: string;
		sunday_year_b?: string;
		sunday_year_c?: string;
		weekday_year_1?: string;
		weekday_year_2?: string;
		psalter_week_1?: string;
		psalter_week_2?: string;
		psalter_week_3?: string;
		psalter_week_4?: string;
	};
	names?: LocaleLiturgicalDayNames;
}
export interface OutputOptions {
	calculateProperties?: boolean;
}
export type AllXOR<T extends any[]> = T extends [
	infer Only
] ? Only : T extends [
	infer A,
	infer B,
	...infer Rest
] ? AllXOR<[
	XOR<A, B>,
	...Rest
]> : never;
export type BaseCyclesMetadata = {
	properCycle: ProperCycle;
	properCycleName: string;
	sundayCycle: SundayCycle;
	sundayCycleName: string;
	weekdayCycle: WeekdayCycle;
	weekdayCycleName: string;
	psalterWeek: PsalterWeekCycle;
	psalterWeekName: string;
};
export type BaseLiturgicalDay = Omit<LiturgicalDayRoot, "properCycle" | "calendarMetadata" | "drop"> & {
	id: Id;
};
export type BaseLiturgicalDayDef = Pick<LiturgicalDayRoot, "colors" | "fromCalendarId" | "periods" | "i18nDef" | "calendarMetadata" | "fromExtendedCalendars" | "seasons" | "isHolyDayOfObligation" | "isOptional" | "precedence" | "dateDef" | "dateExceptions" | "titles" | "colorNames" | "martyrology" | "name" | "rank" | "rankName" | "seasonNames"> & {
	id: Id;
	cycles: PartialCyclesDef;
	input: LiturgicalDayBundleInput[];
};
export type BundleInputs = Record<Id, LiturgicalDayBundleInput[]>;
export type ByIds = Record<Id, LiturgicalDay[]>;
export type CalendarDefInputs = XOR<Inputs, BundleInputs>;
export type CalendarDefInstance = IConstructor<BaseCalendarDef>;
export type CalendarMetadata = {
	dayOfSeason?: number;
	weekOfSeason?: number;
	dayOfWeek?: number;
};
export type CalendarScope = "gregorian" | "liturgical";
export type CamelToUpperSnakeCase<S extends string> = S extends `${infer C0}${infer C1}${infer C2}${infer R}` ? `${`${C0}${C1}${C2}` extends `${UpperChar}${Lowercase<C1>}${Lowercase<C2>}` ? `_${Uppercase<C0>}${Uppercase<C1>}${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${Lowercase<C0>}${UpperChar}${Lowercase<C2>}` ? `${Uppercase<C0>}_${Uppercase<C1>}${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${Lowercase<C0>}${Lowercase<C1>}${UpperChar}` ? `${Uppercase<C0>}${Uppercase<C1>}_${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${UpperChar}${UpperChar}${Lowercase<C2>}` ? `_${Uppercase<C0>}_${Uppercase<C1>}${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${UpperChar}${Lowercase<C1>}${UpperChar}` ? `_${Uppercase<C0>}${Uppercase<C1>}_${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${Lowercase<C0>}${UpperChar}${UpperChar}` ? `${Uppercase<C0>}_${Uppercase<C1>}_${Uppercase<C2>}` : `${`${C0}${C1}${C2}` extends `${UpperChar}${UpperChar}${UpperChar}` ? `_${Uppercase<C0>}_${Uppercase<C1>}_${Uppercase<C2>}` : `${Uppercase<C0>}${Uppercase<C1>}${Uppercase<C2>}`}`}`}`}`}`}`}${CamelToUpperSnakeCase<R>}` : S extends `${infer C0}${infer C1}${infer R}` ? `${`${C0}${C1}` extends `${UpperChar}${Lowercase<C1>}` ? `_${Uppercase<C0>}${Uppercase<C1>}` : `${`${C0}${C1}` extends `${Lowercase<C0>}${UpperChar}` ? `${Uppercase<C0>}_${Uppercase<C1>}` : `${`${C0}${C1}` extends `${UpperChar}${UpperChar}` ? `_${Uppercase<C0>}_${Uppercase<C1>}` : `${Uppercase<C0>}${Uppercase<C1>}`}`}`}${CamelToUpperSnakeCase<R>}` : S extends `${infer C0}${infer R}` ? `${C0 extends UpperChar ? "_" : ""}${Uppercase<C0>}${CamelToUpperSnakeCase<R>}` : S;
export type CanonizationLevel = (typeof CANONIZATION_LEVEL)[number];
export type Color = (typeof COLORS)[number];
export type CompoundTitle = {
	append?: RomcalTitles;
	prepend?: RomcalTitles;
};
export type DateDef = AllXOR<[
	DateDefMonthDate,
	DateDefDateFnAddDay,
	DateDefDateFnSubtractDay,
	DateDefMonthDowNthWeekInMonth,
	DateDefMonthLastDowInMonth
]>;
export type DateDefAddDay = {
	addDay: number;
};
export type DateDefDateFnAddDay = {
	dateFn: keyof Dates;
	dateArgs?: number[];
	addDay?: number;
	yearOffset?: number;
};
export type DateDefDateFnSubtractDay = {
	dateFn: keyof Dates;
	dateArgs?: number[];
	subtractDay?: number;
	yearOffset?: number;
};
export type DateDefException = AllXOR<[
	{
		ifIsBetween: {
			from: DateDef;
			to: DateDef;
			inclusive: boolean;
		};
	},
	{
		ifIsSameAsDate: DateDef;
	},
	{
		ifIsDayOfWeek: DayOfWeek;
	}
]> & {
	setDate: DateDefExtended;
};
export type DateDefExtended = AllXOR<[
	DateDef,
	DateDefAddDay,
	DateDefSubtractDay
]>;
export type DateDefMonthDate = {
	month: MonthIndex;
	date: number;
	yearOffset?: number;
};
export type DateDefMonthDowNthWeekInMonth = {
	month: MonthIndex;
	dayOfWeek: DayOfWeek;
	nthWeekInMonth: number;
	yearOffset?: number;
};
export type DateDefMonthLastDowInMonth = {
	month: MonthIndex;
	lastDayOfWeekInMonth: DayOfWeek;
	yearOffset?: number;
};
export type DateDefSubtractDay = {
	subtractDay: number;
};
export type DatesIndex = Record<string, Id[]>;
export type DayOfWeek = 0 | 1 | 2 | 3 | 4 | 5 | 6;
export type EasterCalculationType = "gregorian" | "julian";
export type EasterDate = {
	year: number;
	month: number;
	day: number;
};
export type FromCalendarId = Id;
export type FullDateDefinition = {
	dateDef: DateDef;
	dateExceptions?: DateDefException[];
};
export type Id = string;
export type Inputs = Record<Id, LiturgicalDayInput | LiturgicalDayInput[]>;
export type LiturgicalBuiltData = {
	byIds: ByIds;
	datesIndex: DatesIndex;
};
export type LiturgicalCalendar = Record<string, LiturgicalDay[]>;
export type LiturgicalDayBundleInput = XOR<LiturgicalDayInput, LiturgicalDayProperOfTimeInput> & Partial<Pick<LiturgicalDayRoot, "fromCalendarId">>;
export type LiturgicalDayConfigOutput = RomcalConfigOutput & BaseLiturgicalDayConfig;
export type LiturgicalDayDefinitions = Record<Id, LiturgicalDayDef>;
export type LiturgicalDayInput = Partial<Pick<LiturgicalDayRoot, "dateDef" | "alternativeTransferDateDefs" | "precedence" | "allowSimilarRankItems" | "isHolyDayOfObligation" | "isOptional" | "properCycle" | "customLocaleId" | "drop">> & {
	dateExceptions?: DateDefException | DateDefException[];
	commonsDef?: CommonDefinition | CommonDefinition[];
	colors?: Color | Color[];
	martyrology?: MartyrologyItemPointer[];
	titles?: TitlesDef;
};
export type LiturgicalDayProperOfTimeInput = Pick<LiturgicalDayRoot, "colors" | "properCycle" | "drop" | "periods" | "i18nDef" | "calendarMetadata" | "seasons" | "customLocaleId" | "precedence" | "dateDef" | "dateExceptions"> & Partial<Pick<LiturgicalDayRoot, "allowSimilarRankItems" | "isHolyDayOfObligation" | "isOptional">>;
export type LiturgicalDayRoot = FullDateDefinition & {
	alternativeTransferDateDefs?: FullDateDefinition[];
	date: string;
	precedence: Precedence;
	rank: Rank;
	rankName: string;
	allowSimilarRankItems: boolean;
	colors: Color[];
	colorNames: string[];
	isHolyDayOfObligation: boolean;
	isOptional: boolean;
	name: string;
	i18nDef: i18nDef;
	customLocaleId?: string;
	seasons: Season[];
	seasonNames: string[];
	periods: Period[];
	martyrology: MartyrologyItem[];
	titles: RomcalTitles;
	commonsDef?: CommonDefinition[];
	cycles: BaseCyclesMetadata;
	properCycle?: ProperCycle;
	calendar: RomcalCalendarMetadata;
	calendarMetadata: CalendarMetadata;
	fromCalendarId: FromCalendarId;
	fromExtendedCalendars: LiturgyDayDiff[];
	drop?: boolean;
	weekday?: LiturgicalDay;
};
export type LiturgyDayDiff = Pick<LiturgicalDayDef, "fromCalendarId"> & Partial<Pick<LiturgicalDayRoot, "fromCalendarId" | "dateDef" | "dateExceptions" | "precedence" | "rank" | "isHolyDayOfObligation" | "i18nDef" | "titles" | "colors"> & {
	cycles: Partial<Pick<BaseCyclesMetadata, "properCycle">>;
	martyrology: Id[];
}>;
export type LocaleColors = {
	black?: string;
	gold?: string;
	green?: string;
	purple?: string;
	red?: string;
	rose: string;
	white?: string;
};
export type LocaleLiturgicalDayNames = Record<string, string>;
export type LocaleMonths = Record<string, string>;
export type LocaleOrdinals = Record<string, string>;
export type LocaleWeeks = Record<string, string>;
export type MartyrologyCatalog = Record<string, MartyrologyDef>;
export type MartyrologyDef = {
	canonizationLevel?: CanonizationLevel;
	dateOfCanonization?: SaintDateDef;
	dateOfCanonizationIsApproximative?: boolean;
	dateOfBeatification?: SaintDateDef;
	dateOfBeatificationIsApproximative?: boolean;
	hideCanonizationLevel?: boolean;
	name?: string;
	titles?: RomcalTitles;
	sex?: Sex;
	hideTitles?: boolean;
	dateOfDedication?: SaintDateDef;
	dateOfBirth?: SaintDateDef;
	dateOfBirthIsApproximative?: boolean;
	dateOfDeath?: SaintDateDef;
	dateOfDeathIsApproximative?: boolean;
	count?: SaintCount;
};
export type MartyrologyItem = {
	id: string;
} & MartyrologyDef;
export type MartyrologyItemPointer = Id | MartyrologyItemRedefined;
export type MartyrologyItemRedefined = {
	id: string;
	titles?: TitlesDef;
	hideTitles?: boolean;
	count?: SaintCount;
};
export type Month = (typeof MONTHS)[number];
export type MonthIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
export type PartialCyclesDef = Pick<BaseCyclesMetadata, "properCycle">;
export type ParticularConfig = Partial<Pick<RomcalConfig, "ascensionOnSunday" | "epiphanyOnSunday" | "corpusChristiOnSunday" | "easterCalculationType">>;
export type PlainCyclesMetadata = BaseCyclesMetadata;
export type Precedence = (typeof PRECEDENCES)[number];
export type ProperCycle = (typeof PROPER_CYCLES)[number];
export type PsalterWeekCycle = (typeof PSALTER_WEEKS)[number];
export type Rank = (typeof RANKS)[number];
export type RomcalBundleObject = BaseRomcalBundle;
export type RomcalCalendarMetadata = {
	weekOfSeason: number;
	dayOfSeason: number;
	dayOfWeek: number;
	nthDayOfWeekInMonth: number;
	startOfLiturgicalYear: string;
	endOfLiturgicalYear: string;
	startOfSeason: string;
	endOfSeason: string;
	seasons: Season[];
};
export type RomcalConfigInput = Omit<Partial<BaseRomcalConfig>, "localeId" | "calendarName">;
export type RomcalConfigOutput = Required<Omit<BaseRomcalConfig, "localizedCalendar" | "calendarsDef">>;
export type RomcalTitles = (Title | PatronTitle)[];
export type SaintCount = number | "many";
export type SaintDate = number | string;
export type SaintDateDef = SaintDate | {
	between: [
		SaintDate,
		SaintDate
	];
} | {
	or: SaintDate[];
} | {
	century: number;
};
export type ScreamingSnakeCase<S extends string> = CamelToUpperSnakeCase<Uncapitalize<S>>;
export type Sex = (typeof SEXES)[number];
export type SundayCycle = (typeof SUNDAY_CYCLES)[number];
export type TitlesDef = RomcalTitles | CompoundTitle;
export type UpperChar = Uppercase<string> & {
	length: 1;
};
export type Weekday = (typeof WEEKDAYS)[number];
export type WeekdayCycle = (typeof WEEKDAY_CYCLES)[number];
export type Without<T, U> = {
	[P in Exclude<keyof T, keyof U>]?: never;
};
export type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
export type i18nDef = [
	string
] | [
	string,
	Record<string, string | number> | string
];

export as namespace Romcal;

export {};
